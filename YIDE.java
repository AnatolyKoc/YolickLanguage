/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package yolickide;

import java.awt.Desktop;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author AntLord
 */
public class YIDE extends javax.swing.JFrame {

    /**
     * Creates new form YIDE
     */
    static String path = null;
    public YIDE() {
        initComponents();
    }
    static String funcclass = "\n" +
"\n" +
"\n" +
"class f {\n" +
"\n" +
"	static int i(double a)\n" +
"	{\n" +
"		return (int)(a);\n" +
"	}\n" +
"	static int i(String a)\n" +
"	{\n" +
"		return Integer.parseInt(a);\n" +
"	}\n" +
"	static float f(double a)\n" +
"	{\n" +
"		return (float)(a);\n" +
"	}\n" +
"	static float f(String a)\n" +
"	{\n" +
"		return Float.parseFloat(a);\n" +
"	}\n" +
"	static double rnd()\n" +
"	{\n" +
"		return Math.random();\n" +
"	}\n" +
"	 static double rnd(double a)\n" +
"	{\n" +
"		return Math.random()*a;\n" +
"	}\n" +
"        static double rd(double a)\n" +
"	{\n" +
"		return Math.round(a);\n" +
"	}\n" +
"	static double rnd(int a)\n" +
"	{\n" +
"		return (int)(Math.random()*a);\n" +
"	}	\n" +
"	static double pi()\n" +
"	{\n" +
"		return Math.PI;\n" +
"	}\n" +
"	static double d(double a)\n" +
"	 {\n" +
"		return a;\n" +
"	}\n" +
"	static double d(String a)\n" +
"	{\n" +
"		return Double.parseDouble(a);\n" +
"	}\n" +
"	static char c(int a)\n" +
"	{\n" +
"		return (char)(a);\n" +
"	}\n" +
"	static char c(int b, String a)\n" +
"	{\n" +
"		return a.charAt(b);\n" +
"	}\n" +
"	static int abs(int a)\n" +
"	{\n" +
"		return Math.abs(a);\n" +
"	}\n" +
"	static long l(double a)\n" +
"	{\n" +
"		return (long)(a);\n" +
"	}\n" +
"	static long l(String a)\n" +
"	{\n" +
"		return Long.parseLong(a);\n" +
"	}\n" +
"	static byte b(double a)\n" +
"	{\n" +
"		return (byte)(a);\n" +
"	}\n" +
"	static byte b(String a)\n" +
"	{\n" +
"		return Byte.parseByte(a);\n" +
"	}\n" +
"	static double pow(double a, double b)\n" +
"	{\n" +
"		return Math.pow(a, b);\n" +
"	}\n" +
"	static double mn(double a, double b)\n" +
"	{\n" +
"		return Math.min(a, b);\n" +
"	}\n" +
"	static double mx(double a, double b)\n" +
"	{\n" +
"		return Math.max(a, b);\n" +
"	}\n" +
"	static String ts(double a)\n" +
"	{\n" +
"		return Double.toString(a);\n" +
"	}\n" +
"	static String ts(int a)\n" +
"	{\n" +
"		return Integer.toString(a);\n" +
"	}\n" +
"	static String ts(char a)\n" +
"	{\n" +
"		return Character.toString(a);\n" +
"	}\n" +
"	static String ts(boolean a)\n" +
"	{\n" +
"		return Boolean.toString(a);\n" +
"	}\n" +
"	static String ts(float a)\n" +
"	{\n" +
"		return Float.toString(a);\n" +
"	}\n" +
"	static String ts(byte a)\n" +
"	{\n" +
"		return Byte.toString(a);\n" +
"	}\n" +
"	static String ts(long a)\n" +
"	{\n" +
"		return Long.toString(a);\n" +
"	}\n" +
"	\n" +
"\n" +
"\n" +
"}\n" +
"";
    static boolean scanner = false;
    static boolean functions = false;
      Write write = new Write();
      Read read = new Read();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        dialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        out = new javax.swing.JButton();
        exp = new javax.swing.JDialog();
        tojava = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        exppath = new javax.swing.JTextField();
        look = new javax.swing.JButton();
        succes = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        run = new javax.swing.JButton();
        export = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        code = new javax.swing.JTextArea();
        func = new javax.swing.JCheckBox();
        scan = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Open");

        dialog.setTitle("Error");
        dialog.setMinimumSize(new java.awt.Dimension(300, 150));

        jLabel1.setText("Error: file not saved");

        out.setText("OK");
        out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogLayout = new javax.swing.GroupLayout(dialog.getContentPane());
        dialog.getContentPane().setLayout(dialogLayout);
        dialogLayout.setHorizontalGroup(
            dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(194, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(out)
                .addContainerGap())
        );
        dialogLayout.setVerticalGroup(
            dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(out)
                .addContainerGap())
        );

        exp.setTitle("Export");
        exp.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        exp.setMinimumSize(new java.awt.Dimension(300, 100));

        tojava.setText("To *.java");
        tojava.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tojavaActionPerformed(evt);
            }
        });

        jLabel2.setText("Path to export:");

        look.setText("...");
        look.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout expLayout = new javax.swing.GroupLayout(exp.getContentPane());
        exp.getContentPane().setLayout(expLayout);
        expLayout.setHorizontalGroup(
            expLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(expLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(expLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tojava)
                    .addGroup(expLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exppath, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(look)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        expLayout.setVerticalGroup(
            expLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, expLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(expLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(exppath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(look))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(tojava)
                .addContainerGap())
        );

        succes.setTitle("Succes!");
        succes.setMinimumSize(new java.awt.Dimension(100, 50));
        succes.setPreferredSize(new java.awt.Dimension(100, 50));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Succes!");

        javax.swing.GroupLayout succesLayout = new javax.swing.GroupLayout(succes.getContentPane());
        succes.getContentPane().setLayout(succesLayout);
        succesLayout.setHorizontalGroup(
            succesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(succesLayout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addContainerGap())
        );
        succesLayout.setVerticalGroup(
            succesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(succesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Yolick Language IDE 0.1 alpha By ANTLORD");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        run.setText("Run");
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        export.setText("Export");
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        code.setColumns(20);
        code.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        code.setForeground(new java.awt.Color(102, 102, 102));
        code.setRows(5);
        code.setCaretColor(new java.awt.Color(102, 102, 102));
        jScrollPane1.setViewportView(code);

        func.setText("Use function");
        func.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcActionPerformed(evt);
            }
        });

        scan.setText("import java.util.Scanner");
        scan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        jMenu1.add(Open);

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        jMenu1.add(Save);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(run)
                        .addGap(130, 130, 130)
                        .addComponent(func)
                        .addGap(42, 42, 42)
                        .addComponent(scan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 490, Short.MAX_VALUE)
                        .addComponent(export)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(run)
                    .addComponent(export)
                    .addComponent(func)
                    .addComponent(scan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void scanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanActionPerformed
     if(scan.isSelected()==true)
             {
                scanner = true;
             }
     else
         scanner = false;
    }//GEN-LAST:event_scanActionPerformed
     
    //read
   
    
    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
       int returnVal = fileChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        try {
          
          code.read( new FileReader( file.getAbsolutePath() ), null );
         path=file.getAbsolutePath();
           System.out.println(path);
        
         write.write("",new File(".").getCanonicalPath()+"\\"+"YolickIDE.java");
        } catch (IOException ex) {
          System.out.println("problem accessing file"+file.getAbsolutePath());
        }
    } else {
        System.out.println("File access cancelled by user.");
    }
    }//GEN-LAST:event_OpenActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
       System.exit(0); 
    }//GEN-LAST:event_ExitActionPerformed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
         File runtime;
        try {
            runtime = new File(new File(".").getCanonicalPath()+"\\"+"YolickIDE.java");
            runtime.delete(); 
        } catch (IOException ex) {
            Logger.getLogger(YIDE.class.getName()).log(Level.SEVERE, null, ex);
        }
        //if we dont know where save file
        if(path == null)
         {
                  dialog.setVisible(true);
         }
         else
         {
             
          
                 
                 try{
                              String toJava;
                    //save YL
                      write.write(code.getText(),path);
                      
                      
                      if(scanner == false)
                      toJava=read.read(path)+"}}";
                      else
                      toJava="import java.util.Scanner;\n"+read.read(path)+"}}";
                      if(functions == true)
                      {
                        toJava=toJava+funcclass;
                      }
                      
                      
                        String    home = new File(".").getCanonicalPath()+"\\"+"YolickIDE.java";
                        //save Java
                         write.write(toJava,home);
                         //runner
                     write.write("@echo off\njavac YolickIDE.java\njava YolickIDE\npause ", new File(".").getCanonicalPath()+"YLRUNTIME.bat");
                     System.out.println(read.read(path)+"}}\n"+home);
                    
                     try {
                        //run
                         Desktop.getDesktop().open(new File(new File(".").getCanonicalPath()+"YLRUNTIME.bat"));
                     } catch (IOException ex) {
                         Logger.getLogger(YIDE.class.getName()).log(Level.SEVERE, null, ex);
                     }
                     
                 } catch (IOException ex) {
                     Logger.getLogger(YIDE.class.getName()).log(Level.SEVERE, null, ex);
                 }
            
         }
    }//GEN-LAST:event_runActionPerformed
//save YL
    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        int returnVal = fileChooser.showSaveDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        try {
    
          code.write( new FileWriter( file.getAbsolutePath()));
         path=file.getAbsolutePath();
         write.write(code.getText(),path);
      
         write.write("",new File(".").getCanonicalPath()+"\\"+"YolickIDE.java");
        System.out.println(path);
          
        } catch (IOException ex) {
          System.out.println("problem accessing file"+file.getAbsolutePath());
        }
    } else {
        System.out.println("File access cancelled by user.");
    }
    }//GEN-LAST:event_SaveActionPerformed
//out of error "not saved"
    private void outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outActionPerformed
            dialog.dispose();
    }//GEN-LAST:event_outActionPerformed

    private void funcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcActionPerformed
        if(func.isSelected()==true)
             {
                functions = true;
             }
     else
         functions = false;
    }//GEN-LAST:event_funcActionPerformed

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
       exp.setVisible(true);
    }//GEN-LAST:event_exportActionPerformed

    private void tojavaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tojavaActionPerformed
      String toJava;
        if(path != null)
      {
        if(scanner == false)
                      toJava=read.read(path)+"}}";
                      else
                      toJava="import java.util.Scanner;\n"+read.read(path)+"}}";
                      if(functions == true)
                      {
                        toJava=toJava+funcclass;
                      }
                      write.write(toJava,exppath.getText());
                      succes.setVisible(true);
                      exp.dispose();
      }
        else
        {
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_tojavaActionPerformed

    private void lookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookActionPerformed
        int returnVal = fileChooser.showSaveDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        exppath.setText(file.getAbsolutePath());
    }//GEN-LAST:event_lookActionPerformed
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(YIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(YIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(YIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YIDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new YIDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem Open;
    private javax.swing.JMenuItem Save;
    private javax.swing.JTextArea code;
    private javax.swing.JDialog dialog;
    private javax.swing.JDialog exp;
    private javax.swing.JButton export;
    private javax.swing.JTextField exppath;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JCheckBox func;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton look;
    private javax.swing.JButton out;
    private javax.swing.JButton run;
    private javax.swing.JCheckBox scan;
    private javax.swing.JDialog succes;
    private javax.swing.JButton tojava;
    // End of variables declaration//GEN-END:variables
}
